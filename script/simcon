#!/usr/bin/env ruby

require 'dotenv'
require 'yaml'
require 'erb'
require 'trollop'
require_relative '../rlib/spreadsheet'

MAIN_COMMAND = "simcon"
SUB_GEN = "gen"
OPT_VM = :vm
OPT_PLEN = :length
OPT_INFILE = :file
SUB_COMMANDS = [SUB_GEN]

# function called according to the command line argument
def generate_workloads(data, num_vms, phase_length, input_file)
	num_phases = (24*60)/phase_length
	begin
		file = File.open(input_file, "w")
		file.write("#{num_vms}\n#{num_phases}\n")
		# workloads
		(1..num_phases).each {
			(1..num_vms).each {
				file.write("#{(Rand.new.rand(1..80)+1)/100.0} ")
			}
			file.write("\n")
		}

		# revenue
		(1..num_vms).each {
			file.write("1, ")
		}
		file.write("\n")

		# penalty
		(1..num_vms).each {
			file.write("2, ")
		}
		file.write("\n")
	rescue IOError => e
		print "Error: #{e.message}"
	ensure
		file.close unless file == nil
	end
end

def generate_spreadsheet
	ss = Spreadsheet.new(data["google_drive"]["username"],
						 data["google_drive"]["password"],
						 data["google_drive"]["key"])
end

# loading the environment variables
Dotenv.load('config/.env')
data = YAML::load(ERB.new(File.read('config/simcon.yml')).result)

# parsing the sub commands and options
global_opts = Trollop::options do
	version "simcon 1.0.0 (c) IIT Bombay"
	banner <<-EOS
Utility to visualize MDP performance

Usage: simcon subcommand [option value]
subcommand:
	gen

Options:
EOS
  stop_on SUB_COMMANDS
end

# parsing subcommands and their options
cmd = ARGV.shift
cmd_opts = case cmd
#---------------------------------------------------------------------------------#
when SUB_GEN
  Trollop::options do
    banner <<-EOS
Utility to genetate random worklods

Options:
EOS
    opt OPT_VM, "select number of virtual machines", :type => :int, :default => 6
    opt OPT_PLEN, "select length of phase", :type => :int, :default => 10
    opt OPT_INFILE, "select input file to write generated data to", :type => :string, :default => "input"
  end
#---------------------------------------------------------------------------------#
else
  Trollop::die "unknown subcommand #{cmd.inspect}"
end

# calling the corresponding function
case cmd
when SUB_GEN
	generate_workloads(data, cmd_opts[OPT_VM], cmd_opts[OPT_PLEN], cmd_opts[OPT_INFILE])
else
	abort("Error: inavalid subcommand")
end

# puts "Global options: #{global_opts.inspect}"
# puts "Subcommand: #{cmd.inspect}"
# puts "Subcommand options: #{cmd_opts.inspect}"
# puts "Remaining arguments: #{ARGV.inspect}"
